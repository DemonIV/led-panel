// backend/controllers/reportsController.js - D√úZELTME
const db = require('../config/database');

class ReportsController {
  // Dashboard istatistikleri
  static async getDashboardStats(req, res) {
    try {
      const [stats] = await db.execute(`
        SELECT 
          (SELECT COUNT(*) FROM Ledler) as toplamLED,
          (SELECT COUNT(*) FROM Magazalar) as toplamMagaza,
          (SELECT COUNT(DISTINCT tip) FROM Ledler WHERE tip IS NOT NULL) as toplamTip,
          (SELECT COUNT(*) FROM Ledler WHERE DATE(createdAt) = CURDATE()) as bugunEklenen,
          (SELECT COUNT(*) FROM Ledler WHERE DATE(createdAt) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)) as haftalikEklenen,
          (SELECT COUNT(*) FROM Ledler WHERE DATE(createdAt) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)) as aylikEklenen
      `);

      const [tipDagilimi] = await db.execute(`
        SELECT tip, COUNT(*) as adet, ROUND(AVG(enPx * boyPx), 0) as ortalamaBoyut
        FROM Ledler 
        WHERE tip IS NOT NULL 
        GROUP BY tip 
        ORDER BY adet DESC
      `);

      const [sehirDagilimi] = await db.execute(`
        SELECT m.sehir, COUNT(l.ledID) as adet
        FROM Magazalar m
        LEFT JOIN Ledler l ON m.magazaID = l.magazaID
        GROUP BY m.sehir
        ORDER BY adet DESC
        LIMIT 10
      `);

      res.json({
        success: true,
        stats: stats[0],
        tipDagilimi,
        sehirDagilimi
      });
    } catch (error) {
      console.error('Dashboard stats error:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // Aylƒ±k rapor
  static async getMonthlyReport(req, res) {
    try {
      const { year, month, sehir } = req.query;

      let whereClause = 'WHERE 1=1';
      let params = [];

      if (year && month) {
        whereClause += ' AND YEAR(l.createdAt) = ? AND MONTH(l.createdAt) = ?';
        params.push(year, month);
      }

      if (sehir) {
        whereClause += ' AND m.sehir = ?';
        params.push(sehir);
      }

      const [monthlyData] = await db.execute(`
        SELECT 
          l.tip,
          COUNT(*) as adet,
          AVG(l.enPx * l.boyPx) as ortalamaBoyut,
          MIN(l.enPx * l.boyPx) as enKucukBoyut,
          MAX(l.enPx * l.boyPx) as enBuyukBoyut,
          GROUP_CONCAT(DISTINCT m.sehir) as sehirler,
          DATE_FORMAT(l.createdAt, '%Y-%m') as donem
        FROM Ledler l
        LEFT JOIN Magazalar m ON l.magazaID = m.magazaID
        ${whereClause}
        GROUP BY l.tip, DATE_FORMAT(l.createdAt, '%Y-%m')
        ORDER BY donem DESC, adet DESC
      `, params);

      const [totalStats] = await db.execute(`
        SELECT 
          COUNT(*) as toplamAdet,
          COUNT(DISTINCT l.tip) as farkliTipSayisi,
          COUNT(DISTINCT m.sehir) as farkliSehirSayisi,
          AVG(l.enPx * l.boyPx) as genelOrtalamaBoyut
        FROM Ledler l
        LEFT JOIN Magazalar m ON l.magazaID = m.magazaID
        ${whereClause}
      `, params);

      res.json({
        success: true,
        data: {
          monthlyBreakdown: monthlyData,
          summary: totalStats[0],
          filters: { year, month, sehir }
        }
      });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }

  // ‚úÖ CSV Export - D√úZELTƒ∞LDƒ∞
  static async exportToCSV(req, res) {
    try {
      console.log('üìÅ CSV Export ba≈ülatƒ±lƒ±yor...', req.body);
      
      const { 
        startDate, 
        endDate, 
        sehir, 
        tip, 
        includeInactive = false 
      } = req.body;

      let whereClause = 'WHERE 1=1';
      let params = [];

      if (startDate && endDate) {
        whereClause += ' AND DATE(l.createdAt) BETWEEN ? AND ?';
        params.push(startDate, endDate);
      }

      if (sehir && Array.isArray(sehir) && sehir.length > 0) {
        whereClause += ` AND m.sehir IN (${sehir.map(() => '?').join(',')})`;
        params.push(...sehir);
      }

      if (tip && Array.isArray(tip) && tip.length > 0) {
        whereClause += ` AND l.tip IN (${tip.map(() => '?').join(',')})`;
        params.push(...tip);
      }

      if (!includeInactive) {
        whereClause += ' AND (l.ozelDurum IS NULL OR l.ozelDurum != "Pasif")';
      }

      console.log('üìä SQL Query:', whereClause, params);

      const [exportData] = await db.execute(`
        SELECT 
          l.ledKodu as 'LED Kodu',
          l.enPx as 'En (px)',
          l.boyPx as 'Boy (px)',
          ROUND(l.aspect, 4) as 'Aspect Ratio',
          l.tip as 'Tip',
          COALESCE(l.ozelDurum, 'Aktif') as 'Durum',
          COALESCE(m.sehir, 'Belirtilmemi≈ü') as '≈ûehir',
          COALESCE(m.magazaAdi, 'Atanmamƒ±≈ü') as 'Maƒüaza',
          COALESCE(l.notlar, '') as 'Notlar',
          DATE_FORMAT(l.createdAt, '%d.%m.%Y %H:%i') as 'Olu≈üturulma Tarihi',
          DATE_FORMAT(l.updatedAt, '%d.%m.%Y %H:%i') as 'G√ºncellenme Tarihi'
        FROM Ledler l
        LEFT JOIN Magazalar m ON l.magazaID = m.magazaID
        ${whereClause}
        ORDER BY l.createdAt DESC
      `, params);

      console.log(`üìà ${exportData.length} kayƒ±t bulundu`);

      if (exportData.length === 0) {
        return res.status(404).json({ 
          error: 'Belirtilen kriterlere uygun veri bulunamadƒ±' 
        });
      }

      // CSV formatƒ±nda d√∂nd√ºr
      const headers = Object.keys(exportData[0]);
      let csvContent = headers.join(',') + '\n';
      
      exportData.forEach(row => {
        const values = headers.map(header => {
          const value = row[header];
          if (value === null || value === undefined) return '';
          return typeof value === 'string' ? `"${value.replace(/"/g, '""')}"` : value;
        });
        csvContent += values.join(',') + '\n';
      });

      // ‚úÖ Response headers d√ºzeltildi
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', `attachment; filename="led-panels-${new Date().toISOString().split('T')[0]}.csv"`);
      
      // UTF-8 BOM for Excel compatibility
      const csvWithBOM = '\uFEFF' + csvContent;
      
      console.log('‚úÖ CSV export ba≈üarƒ±lƒ±');
      res.send(csvWithBOM);
      
    } catch (error) {
      console.error('‚ùå CSV export hatasƒ±:', error);
      res.status(500).json({ error: error.message });
    }
  }
}

module.exports = ReportsController;